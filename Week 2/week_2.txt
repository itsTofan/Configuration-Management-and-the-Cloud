Deploying Puppet

    Applying Rules Locally
        In the provided video transcript, the instructor demonstrates how to install Puppet on a local computer and apply a simple Puppet rule using the `puppet apply` command. 
        Here's a step-by-step summary of the process:
        1. Install Puppet:
            - To install Puppet on Ubuntu, the instructor suggests using the Puppet master package. Run the following command to install it:
                ```
                sudo apt install puppet-master
                ```
        2. Create a Puppet Manifest:
            - Puppet rules are defined in files called "manifests" with a `.pp` extension. For this example, the instructor creates a new file named `tools.pp` to define the rules.
            - In the `tools.pp` file, the instructor adds a package resource to ensure the `htop` package is installed on the computer. The resource looks like this:
                ```puppet
                package { 'htop':
                ensure => present,
                }
                ```
        3. Check if the Package is Not Installed:
            - Before applying the Puppet rules, the instructor checks if the `htop` package is not already installed on the computer.
        4. Apply the Puppet Rules:
            - To apply the Puppet rules defined in the `tools.pp` manifest, use the following command:
                ```
                sudo puppet apply -v tools.pp
                ```
            - The `-v` flag is used to get verbose output, which displays what Puppet is doing during rule application.
        5. Puppet Applies the Rules:
            - Puppet goes through the following steps during rule application:
                - Loads facts (information about the system).
                - Compiles a catalog (list of rules) for the specific computer based on facts.
                - Applies the current configuration (installs the `htop` package).
                - Informs that the package installation is complete.
                - Finishes applying the catalog.
        6. Verify the Package Installation:
            - After applying the Puppet rules, the instructor verifies that the `htop` package is installed by running the `htop` command.
        7. Re-Apply the Puppet Rules:
            - The instructor tries to apply the Puppet rules again using `puppet apply -v tools.pp`.
            - Puppet recognizes that the package is already installed, so it skips the installation process and applies the catalog faster.

        This example demonstrates the basic usage of Puppet in stand-alone mode, where Puppet processes the facts, calculates the rules, and applies changes locally on the computer. 
        It showcases how to create a simple Puppet manifest with a package resource to ensure the installation of a specific package (`htop` in this case) on the computer.

    Managing Resource Relationships
        In this video transcript, the instructor demonstrates how to use resource relationships in Puppet manifests to manage related resources and apply changes more effectively. 
        Here's a summary of the steps:
        1. Create a Puppet Manifest:
            - The instructor starts with a file named `ntp.pp`, which contains multiple resources related to the NTP configuration.
        2. Define Resource Relationships:
            - In the `ntp.pp` manifest, the instructor adds relationships between the resources to ensure proper order of application:
                - The configuration file resource (`file`) requires the NTP package resource (`package`). This ensures that the package is installed before the configuration file is managed.
                - The NTP service resource (`service`) requires the configuration file resource. This ensures that the service starts only after the configuration file is correctly set.
                - The NTP service resource is notified if the configuration file changes. This ensures that if additional changes are made to the configuration file, the service is reloaded 
                with the new settings.
        3. Syntax for Relationships:
            - The resource types (e.g., `package`, `file`, `service`) are written in lowercase when declaring them.
            - When referring to resources in relationships (e.g., `require`, `notify`), the resource types are capitalized (e.g., `Require`, `Notify`).
        4. Including a Class:
            - At the bottom of the `ntp.pp` file, the instructor includes the NTP class with a call to `include NTP`.
            - The class definition and the inclusion call are placed in the same file for this example, but typically, the class is defined in one file and included in another.
        5. Apply the Puppet Rules:
            - The instructor runs the Puppet rules locally using `sudo puppet apply -v ntp.pp`.
        6. Verbose Output:
            - The verbose output of Puppet shows the sequence of actions it took:
                - Installed the NTP package.
                - Checked that the configuration file needed to be updated and made the necessary changes.
                - Restarted the NTP service after updating the configuration.
        7. Testing the Resource Relationships:
            - The instructor makes changes to the `ntp.conf` configuration file, replacing the servers from ntp.org with Google's NTP servers.
            - After saving the changes, the Puppet rules are run again, and Puppet updates the configuration file and refreshes the NTP service to apply the new configuration.
        8. Benefits of Grouping Resources:
            - The `ntp.pp` manifest groups all NTP-related resources together, making it easier to manage and maintain related operations in a single file.

        Resource relationships in Puppet help ensure that resources are applied in the correct order, considering dependencies and requirements. By using relationships, Puppet can 
        efficiently manage complex setups where certain resources depend on others, and changes are propagated appropriately to related resources.

    Organizing Your Puppet Modules
        In this video transcript, the instructor introduces the concept of Puppet modules, which are collections of manifests and associated data organized to manage specific 
        configurations. Here's a summary of the key points:
        1. Puppet Modules:
            - Puppet modules are used to organize resources and configurations related to a specific topic or functionality.
            - They contain manifests and associated data that define how Puppet should manage resources.
        2. Module Structure:
            - All manifests within a module are stored in a directory called "manifests."
            - Additional data, such as files to be copied directly to client machines, are stored in the "files" directory.
            - Templates, which are files preprocessed before being copied to client machines, are stored in the "templates" directory.
            - Modules may also include a "lib" directory for adding custom functions and facts.
        3. init.pp File:
            - Each module should have an `init.pp` file within the "manifests" directory.
            - The `init.pp` file defines a class with the same name as the module.
        4. Using Puppet Forge Modules:
            - Puppet Forge is a repository of prepackaged Puppet modules created and shared by the community.
            - To use a module from Puppet Forge, you can install it on your Puppet server and include it in your deployments.
        5. Installing and Using a Puppet Forge Module (Example: Apache Module):
            - The instructor demonstrates how to install the Apache module provided by Puppet Labs from Puppet Forge.
            - Once installed, the module's directory structure includes manifests, templates, files, and a metadata.json file with additional information.
        6. Including a Module in a Manifest:
            - To use a module in your manifest, use the `include` statement followed by the module name with double colons (::) before it.
            - This tells Puppet to include the specified module and apply all the rules defined in it.
        7. Advantages of Modules:
            - Modules allow system administrators to organize Puppet code into reusable, well-structured components.
            - They make it easier to share and reuse configurations across different deployments.
            - Using existing modules from Puppet Forge saves time and effort as it provides ready-to-use configurations.

        The use of Puppet modules is essential for efficiently managing complex configurations with multiple resources and functionalities. It helps keep the codebase organized, 
        maintainable, and reusable, allowing administrators to focus on specific parts of the infrastructure and simplify the configuration management process.


Deploying Puppet to Clients

    Puppet Nodes
        How to manage different nodes in Puppet using separate node definitions. This allows you to apply specific rules to different systems in your fleet. 
        Here's a summary of the key points:
        1. Node Definitions:
            - In Puppet terminology, a node is any system where you can run a Puppet agent. It could be a workstation, server, virtual machine, or network router, as 
            long as it has the Puppet agent installed.
            - Node definitions are used to specify which classes should be included for each node. Classes define configurations and resources to be managed by Puppet.
        2. Default Node Definition:
            - The default node definition lists the classes that should be included for all nodes in the fleet.
            - For example, it could include common classes like `sudo` and `ntp`, which are applicable to all nodes.
        3. Specific Node Definitions:
            - You can have additional node definitions for specific nodes that need different configurations.
            - Node definitions are typically identified by the node's FQDN (Fully Qualified Domain Name).
            - Specific node definitions can include additional classes and set specific parameters.
        4. Example:
            - For example, a node definition for a web server called `webserver.example.com` may include the `sudo`, `ntp`, and `apache` classes.
        5. site.pp File:
            - Node definitions are usually stored in a file called `site.pp`, which is not part of any module.
            - The `site.pp` file defines which classes will be included for each node.
        6. Base Class:
            - To avoid repeating the inclusion of common classes in every specific node definition, you can define a base class.
            - The base class includes all the common classes applicable to all node types.

        Node definitions allow you to apply different configurations to different nodes in your infrastructure. Puppet looks for the node definition that matches a node's 
        FQDN and provides only the classes and configurations defined for that node. The use of node definitions helps keep the Puppet code organized and maintainable, as you 
        can group related configurations together and apply them to specific nodes as needed.
    
    Puppet's Certificate Infrastructure
        How Puppet uses Public Key Infrastructure (PKI) to establish secure connections between the Puppet server and clients, 
        ensuring secure and trusted communication. Here's a summary of the key points:
        1. Public Key Infrastructure (PKI):
            - Puppet uses Secure Sockets Layer (SSL), the same technology used for encrypting transmissions over HTTPS, to establish secure connections.
            - Each machine involved in the Puppet setup has a pair of keys: a private key (known only to that specific machine) and a public key (shared with other machines).
        2. Certificate Authority (CA):
            - A Certificate Authority is responsible for verifying the identity of machines and issuing certificates that associate public keys with specific machine identities.
            - Puppet comes with its own built-in CA, but you can also integrate an existing CA if your organization already has one.
        3. Node Identity Verification:
            - When a node checks in to the Puppet master for the first time, it requests a certificate.
            - The Puppet master validates the node's identity based on manual verification or an automated process using additional information about the machine.
            - If the node's identity is verified, the Puppet master creates a certificate for that node.
        4. Trusting the Puppet Master:
            - Once the agent node receives the certificate, it knows it can trust the Puppet master and uses the certificate to identify itself when requesting a catalog.
        5. Importance of Node Identity:
            - Authenticating node identity is crucial because Puppet rules may include confidential information that should not fall into the wrong hands.
            - Ensuring the correct node identity prevents unauthorized access and potential misconfigurations.
        6. Manual Signing (Starting Approach):
            - When starting with Puppet, a manual signing approach is common. The node generates a certificate request, which the Puppet master reviews and approves manually.
            - For small test deployments, automatic signing may be used, but it is not recommended for production environments.
        7. Automated Identity Verification:
            - For larger fleets, automating the identity verification process is necessary.
            - This can be achieved by copying unique information into the machines during provisioning, using it as part of the certificate request.
            - A script can then automatically verify the machine's identity without human involvement.

        By using PKI and a trusted Certificate Authority, Puppet ensures secure communication between the Puppet server and clients, allowing for proper authentication 
        and trust establishment between nodes. This secure communication is essential for managing configurations and resources in a safe and reliable manner.

    Setting up Puppet Clients and Servers
        How to set up a basic Puppet deployment using the server-client model. Here's a summary of the key steps:
        1. Configuring the Puppet Server:
            - Install the Puppet master package on the server machine.
            - Configure the Puppet server to automatically sign the certificate requests of the nodes by setting `autosign = true` in the Puppet configuration file.
        2. Configuring the Puppet Client (Web Server):
            - Connect to the client machine (web server) using SSH.
            - Install the Puppet agent on the client machine using the Puppet package.
            - Configure the Puppet agent to talk to the Puppet master (server) by setting the `server` parameter in the Puppet configuration file.
        3. Testing the Connection:
            - Run the Puppet agent on the client machine with verbose output and the `--test` flag to do a test run.
            - The agent generates a certificate request, sends it to the Puppet master, and receives a catalog that applies the specified configurations (in this case, 
            installing and configuring Apache).
        4. Creating Node Definitions:
            - On the Puppet master, create a manifest file called `site.pp` in the production environment's manifests directory 
            (e.g., `/etc/puppet/code/environments/production/manifests/site.pp`).
            - Define node definitions in the `site.pp` file. In this example, a node definition is created for the web server, including the Apache class.
        5. Automatic Puppet Agent Run:
            - To keep Puppet running automatically on the client, enable and start the Puppet service using `systemctl`.
            - The Puppet agent will regularly check in with the Puppet master to see if there are any changes to be applied.

        By following these steps, the Puppet agent on the client machine connects to the Puppet master and applies the specified configurations. The Puppet server-client 
        model allows for centralized configuration management, enabling administrators to manage multiple machines efficiently and keep their configurations up to date 
        automatically. This is just a basic example, and Puppet's power lies in its ability to manage complex configurations across large fleets of machines.


Updating Deployments

    Modifying and Testing Manifests
        How to set up a basic Puppet deployment using the server-client model. Here's a summary of the key steps:
        1. Configuring the Puppet Server:
            - Install the Puppet master package on the server machine.
            - Configure the Puppet server to automatically sign the certificate requests of the nodes by setting `autosign = true` in the Puppet configuration file.
        2. Configuring the Puppet Client (Web Server):
            - Connect to the client machine (web server) using SSH.
            - Install the Puppet agent on the client machine using the Puppet package.
            - Configure the Puppet agent to talk to the Puppet master (server) by setting the `server` parameter in the Puppet configuration file.
        3. Testing the Connection:
            - Run the Puppet agent on the client machine with verbose output and the `--test` flag to do a test run.
            - The agent generates a certificate request, sends it to the Puppet master, and receives a catalog that applies the specified configurations (in this case, 
            installing and configuring Apache).
        4. Creating Node Definitions:
            - On the Puppet master, create a manifest file called `site.pp` in the production environment's manifests directory 
            (e.g., `/etc/puppet/code/environments/production/manifests/site.pp`).
            - Define node definitions in the `site.pp` file. In this example, a node definition is created for the web server, including the Apache class.
        5. Automatic Puppet Agent Run:
            - To keep Puppet running automatically on the client, enable and start the Puppet service using `systemctl`.
            - The Puppet agent will regularly check in with the Puppet master to see if there are any changes to be applied.

        By following these steps, the Puppet agent on the client machine connects to the Puppet master and applies the specified configurations. The Puppet server-client model allows 
        for centralized configuration management, enabling administrators to manage multiple machines efficiently and keep their configurations up to date automatically. This is just
        a basic example, and Puppet's power lies in its ability to manage complex configurations across large fleets of machines.
    
    Safely Rolling out Changes and Validating Them
        In the subsequent videos, the instructor discusses the importance of rolling out changes safely in a production environment and the use of testing environments to mitigate risks. 
        Here are the key points covered:
        1. Production Environment: The production environment is where the actual service is executed and served to users. Making changes directly to production servers can be risky 
             it may impact the service's availability and performance.
        2. Test Environment: The test environment should mirror the production environment, but it is isolated and doesn't serve real users. It is used to test configuration changes 
            before deploying them to production servers.
        3. Puppet Environments: Puppet allows you to create multiple environments, each with its own set of manifests and modules. This helps to fully isolate configurations and test 
            changes in a controlled manner.
        4. Rolling Out Changes: Instead of pushing changes to all nodes at once, it is recommended to roll out changes in batches. This can be done using early adopters or canaries—nodes 
            that receive the changes first to detect potential issues before affecting the entire fleet.
        5. Small and Self-contained Changes: To ease troubleshooting and debugging, it is advisable to make small, self-contained changes. Frequent deployments (e.g., every one or 
            two weeks) with a limited number of changes help to identify issues more effectively.
        6. Continuous Improvement: As your configuration management system and fleet grow, continually improve your testing practices and environments.

        By utilizing testing environments, frequent and small changes, and batch rollouts, you can confidently apply configuration changes to your production environment without causing 
        significant disruptions. The emphasis is on testing and risk mitigation to ensure smooth deployments and reliable infrastructure management.

    
FINAL LAB
cd /etc/puppet/code/environments/production/modules/packages
cat manifests/init.pp

class packages {
   package { 'python-requests':
       ensure => installed,
   }
   if $facts[os][family] == "Debian" {
     package { 'golang':
       ensure => installed,
     }
  }
   if $facts[os][family] == "RedHat" {
     package { 'nodejs':
       ensure => installed,
     }
  }
}

gcloud compute instances describe linux-instance --zone=us-west4-a --format='get(networkInterfaces[0].accessConfigs[0].natIP)'
sudo puppet agent -v --test
apt policy golang